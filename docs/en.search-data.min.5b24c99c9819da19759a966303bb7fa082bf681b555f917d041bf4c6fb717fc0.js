'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/tools/BEC/','title':"B E C",'section':"Additional Tools",'content':"フロー furoBEC #  The furo build essentials container. #  This container contains all tools you need to work with a furo spec project.\nUsage #  Bash mode #  docker run -it --rm -v `pwd`:/specs thenorstroem/furo-bec # do your stuff # type exit to quit exit  Command mode #  This will run furo with the configured flow build.\ndocker run -it --rm -v `pwd`:/specs thenorstroem/furo-bec build   TIPP: If your furo commands have to access different directories, do not forget to mount them.\n Installed Tools #    golang\n  git\n  protoc\n  protoc-gen-grpc-gateway (v2)\n  protoc-gen-openapiv2\n  protoc-gen-go\n  protoc-gen-go-grpc\n  simple-generator\n  furo\n  furoc\n  buf\n  protoc-gen-buf-breaking\n  protoc-gen-buf-lint\n   jq\n   yq\n   No furoc generators are installed. Add the needed furoc-gen-XXX to the .furobecrc file.\n "});index.add({'id':1,'href':'/docs/commands/furo_init/','title':"init",'section':"Commands",'content':"furo init #  Initializes a furo spec project structure with good defaults and some example files to begin with.\nPlease read more about furo init in the quickstart guide.\n"});index.add({'id':2,'href':'/docs/commands/furo_help-command/','title':"help",'section':"Commands",'content':"furo help #  Help about any command\nSynopsis #  Help provides help for any command in the application. Simply type furo help [path to command] for full details.\nfuro help [command] [flags] Options #   -h, --help help for help Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) "});index.add({'id':3,'href':'/docs/installation/','title':"Installation",'section':"Docs",'content':"Installation #  You can install furo on your local machine. For working with specs only, this is enough. We recommend furoBEC if you have to generate more then \u0026ldquo;just\u0026rdquo; the specs. furoBEC is a docker image which has nearly all dependencies already installed to generate all the additional things you may need to.\nInstallation with brew #  brew tap theNorstroem/tap brew install furo  Installation with go #  GO111MODULE=on go get github.com/eclipse/eclipsefuro/furo@v1.27.2  Installation from sources #  git clone git@github.com:eclipse/eclipsefuro.git go install  Working without installation #  Use the docker image furoBEC\ndocker run -it --rm -v `pwd`:/specs thenorstroem/furo-bec "});index.add({'id':4,'href':'/docs/quickstart/','title':"Quickstart Guide",'section':"Docs",'content':"Quickstart Guide #  The easiest way to try out furo is by using furo init with the furo-BEC container. The container brings all the additional tools you need to generate the grpc stubs.\nIn this guide we will setup a furo spec project with the furo init command. The furo cli will then create the needed files to have a working project with a sample µType and µService definition.\nSteps to setup a spec project #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  # 1 Create the project folder mkdir sample-spec # 2 Switch in to the project folder cd sample-spec # 3 Start the container  docker run -it --rm -v `pwd`:/specs thenorstroem/furo-bec # 4 Run furo init furo init # 5 Enter your repository name github.com/yourname/sample-specs # 6 Install the dependencies to other spec projects furo install # 7 Edit your muspecs and or specs # 8 Start the default flow furo # Commit your changes   Detailed explanation of the steps #  Step 1 #  This folder must be under version control with git to make your specs installable by other spec projects.\nStep 3 Start the container #  If you already have an environment for proto and grpc development, you can install and use the furo cli and all the other required commands locally. The furo-BEC comes with a set of needed or useful tools.\nStep 4 + 5 Run furo init #  This command will create a project structure with good default settings to begin with. All you have to enter is the repository name for your project.\n If there is already a .furo file in the folder, the init command will abort.\n Step 6 Install the dependencies to other spec projects #  A spec project can use definitions from other spec projects. The created example will use the FuroBaseSpecs which comes with a lot of additional types to use (the google WellKnownTypes , google.protobuf.Any and many more).\nStep 8 Start the default flow #  By running furo the configured default flow will be executed. This command is similar to furo run default.\nThe example is configured to do the following flow steps:\n deprecated : Check for used types which are declared as deprecated. muSpec2Spec : Create / Update the specs using the muSpecs as input. clean_dist : Configured command which starts a script to delete the dist folder. checkImports : Check for types which are not imported, add the imports when furo can resolve it. genMessageProtos : Create the protos for the messages. genServiceProtos : Create the protos for the services. buf_generate : Configured command which starts the buf generator. gen_transcoder : Configured command which produces a go package with a grpc-gateway server mux. genEsModule : Generates a es module with the specs which is used by eclipsefuro-web.  Project structure after running furo init #  The initialized project will have a\n  .furoc file which contains the project configuration muspec folder with some examples empty specs folder some example scripts to use in your flows  initial project\n. ├── buf.gen.yaml ├── buf.yaml ├── go.mod ├── muspecs │ └── sample │ ├── Sample.services.yaml │ └── sample.types.yaml ├── scripts │ ├── buf_breaking.sh │ ├── buf_generate.sh │ ├── cleanUpDist.sh │ └── gprcgateway │ ├── autoregister.go.tpl │ └── generate.sh └── specs "});index.add({'id':5,'href':'/docs/commands/furo_install/','title':"install",'section':"Commands",'content':"furo install #  Installs the configured dependencies from the .furo config to the specified folder.\nEnter the name of the repository and a tag or branch to install. If you want latest (not recommended) add main (master).\n1 2 3 4  dependencies:- \u0026#34;git@github.com:theNorstroem/furoBaseSpecs.git v1.27.1\u0026#34;# The importer looks for all **/*.type.spec files recursive The importer looks for all **/*.service.spec files recursivedependenciesDir:dependencies# Your installed dependencies from other spec project are saved in this directory  It is up to you to add the dependencies folder to your version control system. We strongly recommend this if you work with packages that are not owned by your own organisation. So you will have them always available, even when the source vanishes.\nfuro install [flags] Options #   -f, --fresh rebuild the package directories -h, --help help for install Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) "});index.add({'id':6,'href':'/docs/commands/furo_run/','title':"run",'section':"Commands",'content':"furo run #  Runs a configured flow.\nSynopsis #  Runs a configured flow of furo commands.\nA flow is a list of custom commands or furo run commands which are executed.\nTo configure a custom command, add them to the commands section of the .furo config file.\nExample Config:\n1 2 3 4 5 6 7 8 9 10  commands:publish_npm:\u0026#34;./scripts/test.sh\u0026#34;flows:default:- muSpec2Spec- publish_npmpublish:- publish_npm  Tipp: If you need the types and services in your command, just call furo again.\n1 2 3  #!/bin/bash # generate the type documentation... furo exportAsYaml | simple-generator -t scripts/typedoc.tpl \u0026gt; dist/typedoc.md   furo run [name of the flow] Options #   -f, --flow string A configured flow from the .furo config (default \u0026quot;default\u0026quot;) -h, --help help for run Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) "});index.add({'id':7,'href':'/docs/web-components/','title':"furo web",'section':"Docs",'content':"フロー Furo Web Components #  Furo Web Components provides an enterprise ready set of web components which play seamlessly with Furo. Based on web standards and future proved. Compliant with any technology of choice. With minimal footprint it includes all enterprise standards, i18n, theming and much more.\nThe furo web components are a wide set of components which covers everything you need to write a web application. They consume the same types which are defined with furo.\nPowered by lit Many of the world\u0026rsquo;s most forward-looking organizations are building with Lit. So do we. Most of our components are using lit or elsewhere native web components.\n Programmable HTML Furo-FBP is like programmable HTML, no deep javascript knowledge is needed to write an application. The flowbased programming paradigm results in less complex and more flexible code.   SAP UI5, Google Material or any other design system A set of input elements which will work with the furo data structure out of the box, are available for a wide set of types.\nOur ui5 components i.e. are just extending the excellent UI5 Web Components, the Enterprise-flavored sugar on top of native APIs!.\nIf this is not enough, it is no problem to write your own components, by using the data adapter.\n Data Integration The transparent data agents are responsible for the communication with the APIs and the adapters for the UI interaction.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph TD UI[UI elements]-- HTML ---agent[Data Agents] agent-- REST ---API   "});index.add({'id':8,'href':'/docs/commands/furo_muSpec2Spec/','title':"muSpec2Spec",'section':"Commands",'content':"furo muSpec2Spec #  Updates or creates the specs with the definitions from the µSpecs.\nRenaming and restructuring your spec folder is ok, furo will always update the correct file. Also a reordering of the fields in your spec, to get nicer protos of for other reasons, is also ok. Furo works with a internal AST and is not interested in order or file names.\n if you have set the config option muSpec.forceSync: true in your furo config, the command will always enable the -d option.\n Because the specs have a higher information density then the µSpecs, furo will fill in calculated default values on the first time it creates a spec file. Later calls of this command will not touch the prefilled fields of the spec.\nOptions #   -d, --delete Delete specs which are not defined in muspecs -h, --help help for muSpec2Spec --overwrite-spec-options Overwrite the proto options section in the spec files Options inherited from parent commands #   --config string config file (default is CWD/.furo) "});index.add({'id':9,'href':'/docs/overview/','title':"Overview",'section':"Docs",'content':"Overview #  Furo can produce and consume proto files. This enables you to use all the existing protoc generators to generate the output that fits your needs. Outputs can be documentations, boilerplate code and even applications.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph TD µSpec(µSpec) Spec([Spec]) µSpec-- furo --Spec Spec-. furo .-µSpec Spec-- furoc-gen-XXX --x[...] Spec-- furo --Es6Module Spec-- furo --Proto Proto-- protoc-gen-grpc-gateway --Gateway Proto-- protoc-gen-openapiv2 --OpenApi OpenApi-- swagger --xo[...] Proto-- protoc --xp[...] Proto -. protoc-gen-furo-specs .-µSpec classDef green fill:#9f6,stroke:#333,stroke-width:2px; class Spec,µSpec green "});index.add({'id':10,'href':'/docs/configuration/','title':"Project Configuration",'section':"Docs",'content':"Configuration #  Each spec project must have a .furo configuration file.\nA fictive example of a furo config for a spec project.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  furo:\u0026#34;1.28.5\u0026#34;# the minimal version of furomodule:\u0026#34;github.com/yourname/sample-specs\u0026#34;version:\u0026#34;v0.0.1\u0026#34;# This is the version for your spec projectspecDir:\u0026#34;./specs\u0026#34;# The spec files are generated to this folderspecFormat:\u0026#34;yaml\u0026#34;# set to yaml or jsondependencies:- \u0026#34;git@github.com:theNorstroem/furoBaseSpecs.git v1.27.1\u0026#34;# The importer looks for all **/*.type.spec files recursive The importer looks for all **/*.service.spec files recursivedependenciesDir:dependencies# Your installed dependencies from other spec project are saved in this directorymuSpec:types:# define a set of globs which matches your type definitions- \u0026#34;./muspecs/**/*types.yaml\u0026#34;- \u0026#34;./muspecs/*types.yaml\u0026#34;services:# define a set of globs which matches your service definitions- \u0026#34;./muspecs/**/*services.yaml\u0026#34;- \u0026#34;./muspecs/*services.yaml\u0026#34;goPackageBase:\u0026#34;github.com/yourname/sample-specs/dist/pb/\u0026#34;# this is used to prefix the go package optionjavaPackagePrefix:\u0026#34;com.example.tutorial.\u0026#34;dir:\u0026#34;muspecs\u0026#34;# the folder where you save the µSpecsforceSync:true# This will delete specs which are deleted in muSpec, this is very useful during prototypingcommands:#camelCase is not allowed, command scripts can only be executed from a flowgen_transcoder:\u0026#34;./scripts/gprcgateway/generate.sh\u0026#34;# shell script to generate a half grpc gatewaybuf_generate:\u0026#34;./scripts/buf_generate.sh\u0026#34;buf_braking:\u0026#34;./scripts/buf_breaking.sh\u0026#34;clean_dist :\u0026#34;./scripts/cleanUpDist.sh\u0026#34;# Deletes the dist folderflows:default:#we choose µSpec as source https://fidl.furo.pro/docs/sourceoftruth/#%C2%B5spec-as-source- deprecated- muSpec2Spec- clean_dist- checkImports- genMessageProtos- genServiceProtos- buf_generate- gen_transcoder- genEsModulebuild:proto:targetDir:\u0026#34;dist/protos/\u0026#34;# Hint: add this to your proto include pathesModule:targetFile:\u0026#34;dist/env.js\u0026#34;# The environment file to register in eclipsefuro-webdist:files:# enter a list of files and directories which should be installed by other projects when they install your spec projec- dist/protos- specs- README.md- .furoextensions:# Add configurations for your private builders and generators here.gen_transcoder:additional_imports:# if you use any any type, you need to import them for the gateway- github.com/yourname/sample-specs/dist/pb/sample  "});index.add({'id':11,'href':'/docs/commands/furo_checkImports/','title':"checkImports",'section':"Commands",'content':"furo checkImports #  This command will check and correct all the needed imports in the specs. These imports are needed for creating proper proto files.\nIf a import can not be resolved, you will get a error message which tells you the file and the field which is causing the problem.\nHow does the import resolving work? #  Furo will look up for type definitions as close as possible to your type (most local to least local). So types which are coming from some installed dependencies and are also defined in your project, will prefer the import from your project.\n1  specs/sample/Sample.type.spec:1:1:Import unknown.Type not found in type sample.Sample on field id   Attention: If you have a typo on a scalar type like sting instead of string, the current version of furo will not detect this as error.  furo checkImports [flags] Options #   -h, --help help for checkImports Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) "});index.add({'id':12,'href':'/docs/commands/','title':"Commands",'section':"Docs",'content':"Furo commands #  Calling furo without any arguments and flags will run the flow runner with the default flow.\nOptions #   --config string config file (default is CWD/.furo) -h, --help help for furo --version shows the version number of the current installation SEE ALSO #    furo init\t- Initializes a furo spec project  furo checkImports\t- Checks and correct the imports  furo exportAsYaml\t- Exports all specs and the current config in one yaml file to stdout  furo genEsModule\t- generate es6 spec module  furo genMessageProtos\t- Generate the message protos from the type specs.  furo genServiceProtos\t- Generate service protos from the specs  furo install\t- Installs the dependencies  furo muSpec2Spec\t- Updates the type specs with the definitions from the type µSpecs.  furo muSrvSanitize\t- Sanitize muServices  furo run\t- Runs a configured flow.  furo spec2muSpec\t- A brief description of your command  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':13,'href':'/docs/tools/','title':"Additional Tools",'section':"Docs",'content':"Useful tools to work with the furo FIDLs #  There are a lot of tools, you have at your hand at your fingertips. If you do not want to install them (a lot of work), you can simply use the docker image thenorstroem/furo-bec. It contains erery tool you need.\nInstallation #  1 2  brew tap theNorstroem/tap brew install furo   protoc #  The protocol buffer compiler, protoc, is used to compile .proto files, which contain service and message definitions.\nprotoc-gen-furo-specs #  Protoc plugin to generate furo specs from proto file.\nprotoc-gen-grpc-gateway (v2) #  gRPC-Gateway is a plugin of protoc. It reads a gRPC service definition, and generates a reverse-proxy server which translates a RESTful JSON API into gRPC. This server is generated according to custom options in your gRPC definition.\nprotoc-gen-go #  Generate the go stubs.\nprotoc-gen-go-grpc #  This tool generates Go language bindings of services in protobuf definition files for gRPC.\nsimple-generator #  Very simple golang template engine for cli usage, using the golang template package and the template functions from sprig.\nfuroc #  The furoc \u0026ldquo;compiler\u0026rdquo; is a generator tool similar to protoc, it can be used to write your custom generators.\nThere are no official plugins available at the moment.\nfuroc-gen-xxx #  Is a placeholder for all furoc plugins that will come.\n"});index.add({'id':14,'href':'/docs/commands/furo_exportAsYaml/','title':"exportAsYaml",'section':"Commands",'content':"furo exportAsYaml #  Exports all specs for types and services and also the current config in one big yaml file to stdout.\nThis comes very handy in custom generators which are ok with the yaml file structure.\nFeel free to add custom sections in the config to use them in your own scripts.\n1 2 3 4 5 6 7 8 9 10 11  installedServices:[...]# The list of installed servicesinstalledTypes:[...]# The list of installed typesservices:[...]# The list of services from your projecttypes:[...]# The list of types from your projectconfig:module:mod# custom config sectionmyopts:# custom config sectionremoteDir:\u0026#34;path/to/somewhere\u0026#34;otherCustomSetting:true  running with the -f option #  You will notice that the output structure of running furo exportAsYaml does have a different structure. Your definitions will be included in the following strurcture:\n1 2 3 4  specdir:dependencies/github.com/theNorstroem/furoBaseSpecs/specspath:furofilename:big_decimal.type.spectypespec:...# the spec is available under this property  furo exportAsYaml [flags] Options #   -f, --full Include the ast info like filenames and more. -h, --help help for exportAsYaml Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) "});index.add({'id':15,'href':'/docs/commands/furo_genMessageProtos/','title':"genMessageProtos",'section':"Commands",'content':"furo genMessageProtos #  Generate the message protos from the type specs.\nThe generated proto messages will be generated to the configured path.\n As you may have noticed the specs have a attribute targetfile. Type specs with the same target file value will be generated in to the same file.\n Attention: You can not target Services and Messages to the same file, because for furo, the generating of types/messages and the generation of services are two different tasks.  .furo config example\n1 2 3  build:proto:targetDir:\u0026#34;./dist/protos\u0026#34;#Hint: add this to your proto include path  furo genMessageProtos [flags] Options #   -h, --help help for genMessageProtos Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) "});index.add({'id':16,'href':'/docs/sourceoftruth/','title':"Source of Truth",'section':"Docs",'content':"Source of Truth #  The different specification formats can be used as a source or used a sink (receiver) or can be both of them.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR µSpec -- Spec Spec -- Proto Proto -- µSpec Spec -- µSpec You should choose one source of truth and stick to it when possible. But it is always possible to change your decision.\nSources AND Sink #   Spec µSpec Proto  Sinks only #   Es6Module (by design) Docs U33E Gateway OpenApi  Spec as source #  graph TD Spec -- Proto Spec -- µSpec Spec -- Es6Module Spec -- Docs Spec -- U33E Spec -- ... Proto -- Gateway Proto -- OpenApi Pros  only one kind of spec to work with run your flow at any time with same results (idempotency) guaranteed interoperability from backend to client   Cons  design phase is harder µSpec only for discussions and not for \u0026ldquo;design\u0026rdquo;    Recommended when you only have to maintain an existing project.  µSpec as source #  graph TD Spec -- Proto µSpec --Spec Spec -- Es6Module Spec -- Docs Spec -- U33E Spec -- ... Proto -- Gateway Proto -- OpenApi Pros  fastest variant to design new stuff simplest notation covers \u0026gt;90% of the cases idempotent guaranteed interoperability from backend to client   Cons  working in specs for some edge cases required    Recommended when you have a fresh project or a lot of changes.\nEasiest method when you know protobuf/grpc.\n Proto as source #  graph TD Proto -- µSpec µSpec --Spec Spec -- Es6Module Spec -- Docs Spec -- U33E Spec -- ... Proto -- Gateway Proto -- OpenApi Pros  good solution when everything is already defined in proto covers \u0026gt;80% of the cases idempotent   Cons  destructive step Proto \u0026ndash;\u0026gt; µSpec working in specs for some cases required writing REST service definitions by \u0026ldquo;hand\u0026rdquo; interoperability from backend to client is not guaranteed because some steps are not under control of furo anymore.    Recommended when you have a huge portfolio of protos and want to bring them to the web (without any changes).  Advanced Setup #  This is a extended µSpec as source variant.\ngraph TD SomeProto -- µSpec µSpec -- Spec Spec -- Proto Spec -- Es6Module Spec -- Docs Spec -- U33E Spec -- ... Proto -- Gateway Proto -- OpenApi Pros  implement external changes very fast designing new stuff still fast guaranteed interoperability from backend to client   Cons  hard setup for the SomeProto part bigger skill set needed partially destructive step    Recommended when you have to import protos to your system. Use \u0026ldquo;µSpec as source\u0026rdquo; first and switch to this variant when you have to.  Multiple Sources of Truth #  The you know what you do mode.\nWhen you have to migrate a project from different spec formats, you have to use this setup. This is not recomended and should still be an exception and not the default.  graph TD SomeProto -- µSpec OtherFormats -- Spec µSpec -- Spec Spec -- Proto Spec -- µSpec Spec -- Es6Module Spec -- Docs Spec -- U33E Spec -- ... Proto -- Gateway Proto -- OpenApi Proto -- µSpec Pros  Do what ever you ever want.   Cons  Dangerous More then one flow required Not idempotent very hard setup    NOT Recommended!\nDo this only when you have to do, try to switch to another setup as fast as you can.\n "});index.add({'id':17,'href':'/docs/commands/furo_genServiceProtos/','title':"genServiceProtos",'section':"Commands",'content':"furo genServiceProtos #  Generate the service protos from the service specs.\nThe generated proto services will be generated to the configured path.\n As you may have noticed the specs have a attribute targetfile (target in µServices, sorry). Service specs with the same targetfile or target value will be generated in to the same proto file.\n Attention: You can not target Services and Messages to the same file, because for furo, the generating of types/messages and the generation of services are two different tasks.  .furo config example\n1 2 3  build:proto:targetDir:\u0026#34;./dist/protos\u0026#34;#Hint: add this to your proto include path  furo genServiceProtos [flags] Options #   -h, --help help for genServiceProtos Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':18,'href':'/docs/commands/furo_genEsModule/','title':"genEsModule",'section':"Commands",'content':"furo genEsModule #  This command will generate es6 spec module to use in your client projects.\nThe @furo/data components needs them to validate user input against the defined constraints, calculates the deltas to send to the server in a PATCH request, forward them to the input components like the ones from @furo/ui5 with data binding, apply error messages from the server to the corresponding field, resolve the correct component to display or edit the data fields, \u0026hellip;\nHint: Publish the env file with npm, to make them installable with proper versioning for the web projects.  Config #  1 2 3  build:esModule:targetFile:\u0026#34;dist/env.js\u0026#34;# The environment file to register in eclipsefuro-web  furo genEsModule [flags] Options #   -h, --help help for genEsModule Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) "});index.add({'id':19,'href':'/docs/commands/furo_muSrvSanitize/','title':"muSrvSanitize",'section':"Commands",'content':"furo muSrvSanitize #  Sanitize the muServices, to avoid errors in your protos or es6 services.\nSanitizing includes at the moment:\n Adding of query params which are part of the url and needs to be listed as qp\u0026rsquo;s for the request body.  A method definition like:\n1 2  - md: \u0026#39;Get:GET /sample/{smp} google.protobuf.Empty , sample.SampleEntity#Returns a single Sample.\u0026#39;  will become to\n1 2 3  - md: \u0026#39;Get:GET /sample/{smp} google.protobuf.Empty , sample.SampleEntity#Returns a single Sample.\u0026#39;qp:smp:\u0026#39;string #The query param smp stands for XXX id.\u0026#39;  and you can change it to\n1 2 3  - md: \u0026#39;Get:GET /sample/{smp} google.protobuf.Empty , sample.SampleEntity#Returns a single Sample.\u0026#39;qp:smp:\u0026#39;string #The query param smp stands for a sample id.\u0026#39;  Notice: A existing query param will not be touched or modified.  furo muSrvSanitize [flags] Options #   -h, --help help for muSrvSanitize Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':20,'href':'/docs/commands/furo_spec2muSpec/','title':"spec2muSpec",'section':"Commands",'content':"furo spec2muSpec #  Updates or creates the µSpecs with the definitions from the specs.\n if you have set the config option muSpec.forceSync: true in your furo config, the command will always enable the -d option.\n Because the specs have a higher information density then the µSpecs this step will loose information.\nThis command is useful if you want to switch your source of truth from spec to µSpec.\nThis command is useful if you want to discuss your services and types without having unneeded details.\nfuro spec2muSpec [flags] Options #   -d, --delete Delete muSpecs which not exist in Spec -h, --help help for spec2muSpec Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':21,'href':'/posts/movingToEclipse/','title':"Moving to eclipse",'section':"Blog",'content':"We started to move the many parts of the furo project from theNorstroem to eclipse last month.\nThis forced us to restructure the individual parts of furo. The restructuring definitely brings us some advantages for the project itself.\nFor the consumers, the sharp separation of the involved components, a cleaner naming and improved documentation will give them a better view of the big picture.\nWe kept the changes that you have to made as low as possible. Please read in the guide below, what you have to do, to migrate your project.\nMigration guide: #  Web related stuff: #  There are no changes to make, all npm packages have the same name.\nAPI and spec related stuff: #  All you have to do is\n Rename the .spectools file to .furo. Replace the word spectools with furo in the renamed file. Update the dependency to the furoBaseSpecs (if you have) to at least git@github.com:theNorstroem/furoBaseSpecs.git v1.27.1. If you work with BEC, install the latest or at least 1.27.3 by running docker pull thenorstroem/furo-bec:v1.27.3 and you are done. If you work with a local installation, update the brew tap and run brew install furo and you are done. If you installed furo from the source, checkout github.com/eclipse/eclipsefuro.  Note on nested spces If you have dependenies which are not already switched from spectools to furo, you have to rename the .spectools file to .furo in your dependency folder.  Custom generators #  If you have built custom generators for furoc, change the dependencies for spectools and furoc to at least github.com/eclipse/eclipsefuro v1.27.3\ngithub.com/theNorstroem/furoc becomes github.com/eclipse/eclipsefuro/furoc github.com/theNorstroem/spectools becomes github.com/eclipse/eclipsefuro/furo  "});})();