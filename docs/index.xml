<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on フロー Furo</title>
    <link>http://furo.pro/</link>
    <description>Recent content in Introduction on フロー Furo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://furo.pro/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>B E C</title>
      <link>http://furo.pro/docs/tools/BEC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/tools/BEC/</guid>
      <description>フロー furoBEC #  The furo build essentials container. #  This container contains all tools you need to work with a furo spec project.
Usage #  Bash mode #  docker run -it --rm -v `pwd`:/specs thenorstroem/furo-bec # do your stuff # type exit to quit exit  Command mode #  This will run furo with the configured flow build.
docker run -it --rm -v `pwd`:/specs thenorstroem/furo-bec build   TIPP: If your furo commands have to access different directories, do not forget to mount them.</description>
    </item>
    
    <item>
      <title>init</title>
      <link>http://furo.pro/docs/commands/furo_init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_init/</guid>
      <description>furo init #  Initialize a project structure to begin with.
Synopsis #  The configuration is set up to use µSpecs as source of truth.</description>
    </item>
    
    <item>
      <title>help</title>
      <link>http://furo.pro/docs/commands/furo_help-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_help-command/</guid>
      <description>furo help #  Help about any command
Synopsis #  Help provides help for any command in the application. Simply type furo help [path to command] for full details.
furo help [command] [flags] Options #   -h, --help help for help Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) Auto generated by spf13/cobra on 23-Oct-2020 #  </description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>http://furo.pro/docs/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/installation/</guid>
      <description>Installation #  You can install furo on your local machine. For working with specs only, this is enough. We recommend furoBEC if you have to generate more then &amp;ldquo;just&amp;rdquo; the specs. furoBEC is a docker image which has nearly all dependencies already installed to generate all the additional things you may need to.
Installation with brew #  brew tap theNorstroem/tap brew install furo  Installation with go #  GO111MODULE=on go get github.</description>
    </item>
    
    <item>
      <title>Quickstart Guide</title>
      <link>http://furo.pro/docs/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/quickstart/</guid>
      <description>Quickstart Guide #  The easiest way to try out furo is by using furo init with the furo-BEC container. The container brings all the additional tools you need to generate the grpc stubs.
In this guide we will setup a furo spec project with the furo init command. The furo cli will then create the needed files to have a working project with a sample µType and µService definition.</description>
    </item>
    
    <item>
      <title>run</title>
      <link>http://furo.pro/docs/commands/furo_run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_run/</guid>
      <description>furo run #  Runs a configured flow.
Synopsis #  Runs a configured flow of furo commands.
A flow is a list of custom commands or furo run commands which are executed.
To configure a custom command, add them to the commands section of the .furo config file.
Example Config:
1 2 3 4 5 6 7 8 9 10  commands:publish_npm:&amp;#34;./scripts/test.sh&amp;#34;flows:default:- muSpec2Spec- publish_npmpublish:- publish_npm  Tipp: If you need the types and services in your command, just call furo again.</description>
    </item>
    
    <item>
      <title>furo web</title>
      <link>http://furo.pro/docs/web-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/web-components/</guid>
      <description>フロー Furo Web Components #  Furo Web Components provides an enterprise ready set of web components which play seamlessly with Furo. Based on web standards and future proved. Compliant with any technology of choice. With minimal footprint it includes all enterprise standards, i18n, theming and much more.
The furo web components are a wide set of components which covers everything you need to write a web application. They consume the same types which are defined with furo.</description>
    </item>
    
    <item>
      <title>muSpec2Spec</title>
      <link>http://furo.pro/docs/commands/furo_muSpec2Spec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_muSpec2Spec/</guid>
      <description>furo muSpec2Spec #  Updates the type specs with the definitions from the type µSpecs.
Synopsis #  The converter will update your type specs and also delete specs and fields if they are not in the µSpec file anymore.
Do not forget to set your µSpec folder in the .furo config.
furo muSpec2Spec [flags] Options #   -d, --delete Delete specs which are not in muTypes -h, --help help for muSpec2Spec --overwrite-spec-options Overwrite the proto options section in the spec files Options inherited from parent commands #   --config string config file (default is CWD/.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://furo.pro/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/overview/</guid>
      <description>Overview #  Furo can produce and consume proto files. This enables you to use all the existing protoc generators to generate the output that fits your needs. Outputs can be documentations, boilerplate code and even applications.
 mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph TD µSpec(µSpec) Spec([Spec]) µSpec-- furo --Spec Spec-. furo .-µSpec Spec-- furoc-gen-XXX --x[...] Spec-- furo --Es6Module Spec-- furo --Proto Proto-- protoc-gen-grpc-gateway --Gateway Proto-- protoc-gen-openapiv2 --OpenApi OpenApi-- swagger --xo[.</description>
    </item>
    
    <item>
      <title>Project Configuration</title>
      <link>http://furo.pro/docs/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/configuration/</guid>
      <description>Configuration #  Each spec project must have a .furo configuration file.
A fictive example of a furo config for a spec project.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  furo:&amp;#34;1.</description>
    </item>
    
    <item>
      <title>checkImports</title>
      <link>http://furo.pro/docs/commands/furo_checkImports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_checkImports/</guid>
      <description>furo checkImports #  Checks and correct the imports
Synopsis #  Use this command after moving of types. It will check and correct all imports and update the specs
furo checkImports [flags] Options #   -h, --help help for checkImports Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) Auto generated by spf13/cobra on 23-Oct-2020 #  </description>
    </item>
    
    <item>
      <title>exportAsYaml</title>
      <link>http://furo.pro/docs/commands/furo_exportAsYaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_exportAsYaml/</guid>
      <description>furo exportAsYaml #  Exports all specs and the current config in one yaml file to stdout
Synopsis #  Use this for your chain of generators&amp;hellip;
You will get a yaml with all types and services and the config. Feel free to add custom sections in the config to use them in custom commands or scripts.
services: your.Service: ... types: your.type: ... config: module: mod custom: remoteDir: &amp;quot;path/to/somewhere&amp;quot; otherCustomSetting: true  furo exportAsYaml [flags] Options #   -f, --full Include the ast info -h, --help help for exportAsYaml Options inherited from parent commands #   --config string config file (default is CWD/.</description>
    </item>
    
    <item>
      <title>genMessageProtos</title>
      <link>http://furo.pro/docs/commands/furo_genMessageProtos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_genMessageProtos/</guid>
      <description>furo genMessageProtos #  Generate the message protos from the type specs.
Synopsis #  The generated proto messages will be generated to the configured path.
.furo config example
build: proto: targetDir: &amp;quot;./dist/protos&amp;quot; #Hint: add this to your proto include path  furo genMessageProtos [flags] Options #   -h, --help help for genMessageProtos Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) Auto generated by spf13/cobra on 23-Oct-2020 #  </description>
    </item>
    
    <item>
      <title>genServiceProtos</title>
      <link>http://furo.pro/docs/commands/furo_genServiceProtos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_genServiceProtos/</guid>
      <description>furo genServiceProtos #  Generate service protos from the specs
Synopsis #  The generated proto services will be generated to the configured path.
.furo config example
build: proto: targetDir: &amp;quot;./dist/proto&amp;quot; #Hint: add this to your proto include path	 furo genServiceProtos [flags] Options #   -h, --help help for genServiceProtos Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) Auto generated by spf13/cobra on 23-Oct-2020 #  </description>
    </item>
    
    <item>
      <title>genEsModule</title>
      <link>http://furo.pro/docs/commands/furo_genEsModule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_genEsModule/</guid>
      <description>furo genEsModule #  generate es6 spec module
Synopsis #  The furo data objects relys on the server specs.
furo genEsModule [flags] Options #   -h, --help help for genEsModule Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) Auto generated by spf13/cobra on 23-Oct-2020 #  </description>
    </item>
    
    <item>
      <title>muSrvSanitize</title>
      <link>http://furo.pro/docs/commands/furo_muSrvSanitize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_muSrvSanitize/</guid>
      <description>furo muSrvSanitize #  Sanitize muServices
Synopsis #  Sanitizing includes:
 Adding of query params which are part of the url.  furo muSrvSanitize [flags] Options #   -h, --help help for muSrvSanitize Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) Auto generated by spf13/cobra on 23-Oct-2020 #  </description>
    </item>
    
    <item>
      <title>spec2muSpec</title>
      <link>http://furo.pro/docs/commands/furo_spec2muSpec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_spec2muSpec/</guid>
      <description>furo spec2muSpec #  A brief description of your command
Synopsis #  A longer description that spans multiple lines and likely contains examples and usage of using your command. For example:
Cobra is a CLI library for Go that empowers applications. This application is a tool to generate the needed files to quickly create a Cobra application.
furo spec2muSpec [flags] Options #   -d, --delete Delete muSpecs which not exist in Spec -h, --help help for spec2muSpec Options inherited from parent commands #   --config string config file (default is CWD/.</description>
    </item>
    
    <item>
      <title>install</title>
      <link>http://furo.pro/docs/commands/furo_install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_install/</guid>
      <description>furo install #  Installs the dependencies
Synopsis #  Installs the configured dependencies from the .furo config.
Enter the name of the repository and a tag or branch to install. If you want latest (not recommended) add main (master).
dependencies: - &amp;quot;git@github.com:theNorstroem/furoBaseSpecs.git v1.10.9&amp;quot;  It is up to you to add the dependencies to your version control system. We strongly recommend this if you work with packages that are not owned by your organisation.</description>
    </item>
    
    <item>
      <title>Moving to eclipse</title>
      <link>http://furo.pro/posts/movingToEclipse/</link>
      <pubDate>Mon, 12 Jul 2021 21:22:22 +0100</pubDate>
      
      <guid>http://furo.pro/posts/movingToEclipse/</guid>
      <description>We started to move the many parts of the furo project from theNorstroem to eclipse last month.
This forced us to restructure the individual parts of furo. The restructuring definitely brings us some advantages for the project itself.
For the consumers, the sharp separation of the involved components, a cleaner naming and improved documentation will give them a better view of the big picture.
We kept the changes that you have to made as low as possible.</description>
    </item>
    
  </channel>
</rss>
