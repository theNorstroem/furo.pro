<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on フロー Furo</title>
    <link>http://furo.pro/</link>
    <description>Recent content in Introduction on フロー Furo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://furo.pro/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>B E C</title>
      <link>http://furo.pro/docs/tools/BEC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/tools/BEC/</guid>
      <description>フロー furoBEC #  The furo build essentials container. #  This container contains all tools you need to work with a furo spec project.
Usage #  Bash mode #  1 2 3 4  docker run -it --rm -v `pwd`:/specs -v ~/.ssh:/root/.ssh thenorstroem/furo-bec # do your stuff # type exit to quit exit   Command mode #  Starting your container with the arguments build or publish will execute the corresponding flow.</description>
    </item>
    
    <item>
      <title>init</title>
      <link>http://furo.pro/docs/commands/furo_init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_init/</guid>
      <description>furo init #  Initializes a furo spec project structure with good defaults and some example files to begin with.
Please read more about furo init in the quickstart guide.</description>
    </item>
    
    <item>
      <title>help</title>
      <link>http://furo.pro/docs/commands/furo_help-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_help-command/</guid>
      <description>furo help #  Help about any command
Synopsis #  Help provides help for any command in the application. Simply type furo help [path to command] for full details.
furo help [command] [flags] Options #   -h, --help help for help Options inherited from parent commands #   --config string config file (default is CWD/.furo.yaml) </description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>http://furo.pro/docs/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/installation/</guid>
      <description>Installation #  You can install furo on your local machine. For working with specs only, this is enough. We recommend furoBEC if you have to generate more then &amp;ldquo;just&amp;rdquo; the specs. furoBEC is a docker image which has nearly all dependencies already installed to generate all the additional things you may need to.
Installation with brew #  brew tap theNorstroem/tap brew install furo  Installation with go #  GO111MODULE=on go get github.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://furo.pro/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/overview/</guid>
      <description>Overview #  Furo can produce and consume proto files. This enables you to use all the existing protoc generators to generate the output that fits your needs. Outputs can be documentations, boilerplate code and even applications.
 mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph TD µSpec(µSpec) Spec([Spec]) µSpec-- furo --Spec Spec-. furo .-µSpec Spec-- furoc-gen-XXX --x[...] Spec-- furo --Es6Module Spec-- furo --Proto Proto-- protoc-gen-grpc-gateway --Gateway Proto-- protoc-gen-openapiv2 --OpenApi OpenApi-- swagger --xo[.</description>
    </item>
    
    <item>
      <title>Quickstart Guide</title>
      <link>http://furo.pro/docs/guides/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/guides/quickstart/</guid>
      <description>Quickstart Guide #  The easiest way to try out furo is by using furo init with the furo-BEC container. The container brings all the additional tools you need to generate the grpc stubs.
In this guide we will setup a furo spec project with the furo init command. The furo cli will then create the needed files to have a working project with a sample µType and µService definition.</description>
    </item>
    
    <item>
      <title>install</title>
      <link>http://furo.pro/docs/commands/furo_install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_install/</guid>
      <description>furo install #  Installs the configured dependencies from the .furo config to the specified folder.
Enter the name of the repository and a tag or branch to install. If you want latest (not recommended) add main (master).
1 2 3 4  dependencies:- &amp;#34;git@github.com:theNorstroem/furoBaseSpecs.git v1.27.1&amp;#34;# The importer looks for all **/*.type.spec files recursive The importer looks for all **/*.service.spec files recursivedependenciesDir:dependencies# Your installed dependencies from other spec project are saved in this directory  It is up to you to add the dependencies folder to your version control system.</description>
    </item>
    
    <item>
      <title>run</title>
      <link>http://furo.pro/docs/commands/furo_run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_run/</guid>
      <description>furo run #  Runs a configured flow.
Synopsis #  Runs a configured flow of furo commands.
A flow is a list of custom commands or furo run commands which are executed.
To configure a custom command, add them to the commands section of the .furo config file.
Example Config:
1 2 3 4 5 6 7 8 9 10  commands:publish_npm:&amp;#34;./scripts/test.sh&amp;#34;flows:default:- muSpec2Spec- publish_npmpublish:- publish_npm  Tipp: If you need the types and services in your command, just call furo again.</description>
    </item>
    
    <item>
      <title>muSpec2Spec</title>
      <link>http://furo.pro/docs/commands/furo_muSpec2Spec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_muSpec2Spec/</guid>
      <description>furo muSpec2Spec #  Updates or creates the specs with the definitions from the µSpecs.
Renaming and restructuring your spec folder is ok, furo will always update the correct file. Also a reordering of the fields in your spec, to get nicer protos of for other reasons, is also ok. Furo works with a internal AST and is not interested in order or file names.
Attention: if you have set the config option muSpec.</description>
    </item>
    
    <item>
      <title>Project Configuration</title>
      <link>http://furo.pro/docs/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/configuration/</guid>
      <description>Configuration #  Each spec project must have a configuration file. The furo cli tool will look up for .furo in the current working directory or can be called with the --config option.
You can generate a config file with a inital project structure by calling furo init.
As you can see, the config file is a regular yaml file and is easy to edit in any text editor or IDE.</description>
    </item>
    
    <item>
      <title>eBook Tutorial</title>
      <link>http://furo.pro/docs/guides/ebook-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/guides/ebook-tutorial/</guid>
      <description>Creating an enterprise-flavoured ToDo application from scratch with the Furo Web Stack #   eBook: https://github.com/theNorstroem/todo-management-tool/blob/main/eBook.pdf Repository: https://github.com/theNorstroem/todo-management-tool Furo Web Stack: https://furo.pro/  Foreword #  Hi! This guide is intended to simplify the introduction to the FURO Web Stack. The tutorial is based on a realistic story. You will explore:
 API Design with Eclipse Furo Furo Web Stack (https://furo.pro/) Go programming language (grpc backend) How to expose REST via gRPC Gateway Flow based programming Web Components (custom elements, shadow DOM, HTML templates, https://developer.</description>
    </item>
    
    <item>
      <title>Import protos</title>
      <link>http://furo.pro/docs/guides/import-proto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/guides/import-proto/</guid>
      <description>How to import proto files to µSpecs or Specs #  We offer 2 different ways to import specs from proto.
 protoc-gen-furo-specs which will generate specs protoc-gen-furo-muspecs which will generate muspecs  The steps for any of these two generators are the same. This document describes the import process for *.proto to µSpecs.
&amp;nbsp;➔&amp;nbsp; フロー µSpecs  mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph TD Protoc(Proto)-- protoc-gen-furo-spec -- Spec Protoc -- protoc-gen-furo-muspec -- µSpec µSpec(µSpec) Spec(Spec) µSpec-.</description>
    </item>
    
    <item>
      <title>Working with Flows</title>
      <link>http://furo.pro/docs/flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/flow/</guid>
      <description>Working with Flows #  Instead of calling each command of furo again and again, you can set up a flow which chains them together.
The config file from the init haves a preconfigured default flow.
chain of furo commands  mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph LR deprecated -- muSpec2Spec -- checkImports -- genMessageProtos -- genServiceProtos How to define a flow #  The single commands of furo can be configured as a chain of commands.</description>
    </item>
    
    <item>
      <title>GraphQL</title>
      <link>http://furo.pro/docs/guides/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/guides/graphql/</guid>
      <description>How to expose a GraphQL API from furo-specs #  Furo does not produce GraphQL directly.
Furo produces proto files. From the proto you have to generate a grpc-gateway and the OAS specs.
The final step is to use IBMs openapi-to-graphql or if you just want an instant server to test something the openapi-to-graphql-cli.
➔ ➔ Example Request #  collection entity </description>
    </item>
    
    <item>
      <title>Working with Dependencies</title>
      <link>http://furo.pro/docs/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/dependencies/</guid>
      <description>Working with Dependencies #  You can install another spec in to your project, to use their types.
Note: A installable dependency must be reachable by your git command.  Install a spec project #  To install a dependency add them to the dependencies section of the config. It is a list with git repositories followed by a version tag or branch name.
By running furo install the dependency will be added to the configured directory in your project.</description>
    </item>
    
    <item>
      <title>checkImports</title>
      <link>http://furo.pro/docs/commands/furo_checkImports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_checkImports/</guid>
      <description>furo checkImports #  This command will check and correct all the needed imports in the specs. These imports are needed for creating proper proto files.
If a import can not be resolved, you will get a error message which tells you the file and the field which is causing the problem.
How does the import resolving work? #  Furo will look up for type definitions as close as possible to your type (most local to least local).</description>
    </item>
    
    <item>
      <title>Well known Base Types</title>
      <link>http://furo.pro/docs/basetypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/basetypes/</guid>
      <description>Known types free of charge #  The github.com:theNorstroem/furoBaseSpecs contain ready-made type specifications such as BigDecimal, Reference and much more.
Type Listing #   Furo types  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/furo   Furo Annotated Types (FAT)  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/furo/fat   Google api  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/google/api   Google rpc  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/google/rpc   Google protobuf  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/google/protobuf   Google type  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/google/type    Usage #  In the chapter Working with Dependencies you will see how to install the base types.</description>
    </item>
    
    <item>
      <title>exportAsYaml</title>
      <link>http://furo.pro/docs/commands/furo_exportAsYaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_exportAsYaml/</guid>
      <description>furo exportAsYaml #  Exports all specs for types and services and also the current config in one big yaml file to stdout.
This comes very handy in custom generators which are ok with the yaml file structure.
Feel free to add custom sections in the config to use them in your own scripts.
1 2 3 4 5 6 7 8 9 10 11  installedServices:[...]# The list of installed servicesinstalledTypes:[.</description>
    </item>
    
    <item>
      <title>genMessageProtos</title>
      <link>http://furo.pro/docs/commands/furo_genMessageProtos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_genMessageProtos/</guid>
      <description>furo genMessageProtos #  Generate the message protos from the type specs.
The generated proto messages will be generated to the configured path.
 As you may have noticed the specs have a attribute targetfile. Type specs with the same target file value will be generated in to the same file.
 Attention: You can not target Services and Messages to the same file, because for furo, the generating of types/messages and the generation of services are two different tasks.</description>
    </item>
    
    <item>
      <title>genServiceProtos</title>
      <link>http://furo.pro/docs/commands/furo_genServiceProtos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_genServiceProtos/</guid>
      <description>furo genServiceProtos #  Generate the service protos from the service specs.
The generated proto services will be generated to the configured path.
 As you may have noticed the specs have a attribute targetfile (target in µServices, sorry). Service specs with the same targetfile or target value will be generated in to the same proto file.
 Attention: You can not target Services and Messages to the same file, because for furo, the generating of types/messages and the generation of services are two different tasks.</description>
    </item>
    
    <item>
      <title>genEsModule</title>
      <link>http://furo.pro/docs/commands/furo_genEsModule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_genEsModule/</guid>
      <description>furo genEsModule #  This command will generate es6 spec module to use in your client projects.
The @furo/data components needs them to validate user input against the defined constraints, calculates the deltas to send to the server in a PATCH request, forward them to the input components like the ones from @furo/ui5 with data binding, apply error messages from the server to the corresponding field, resolve the correct component to display or edit the data fields, &amp;hellip;</description>
    </item>
    
    <item>
      <title>muSrvSanitize</title>
      <link>http://furo.pro/docs/commands/furo_muSrvSanitize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_muSrvSanitize/</guid>
      <description>furo muSrvSanitize #  Sanitize the muServices, to avoid errors in your protos or es6 services.
Sanitizing includes at the moment:
 Adding of query params which are part of the url and needs to be listed as qp&amp;rsquo;s for the request body.  A method definition like:
1 2  - md: &amp;#39;Get:GET /sample/{smp} google.protobuf.Empty , sample.SampleEntity#Returns a single Sample.&amp;#39;  will become to
1 2 3  - md: &amp;#39;Get:GET /sample/{smp} google.</description>
    </item>
    
    <item>
      <title>spec2muSpec</title>
      <link>http://furo.pro/docs/commands/furo_spec2muSpec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/commands/furo_spec2muSpec/</guid>
      <description>furo spec2muSpec #  Updates or creates the µSpecs with the definitions from the specs.
 if you have set the config option muSpec.forceSync: true in your furo config, the command will always enable the -d option.
 Because the specs have a higher information density then the µSpecs this step will loose information.
This command is useful if you want to switch your source of truth from spec to µSpec.</description>
    </item>
    
    <item>
      <title>Moving to eclipse</title>
      <link>http://furo.pro/posts/movingToEclipse/</link>
      <pubDate>Mon, 12 Jul 2021 21:22:22 +0100</pubDate>
      
      <guid>http://furo.pro/posts/movingToEclipse/</guid>
      <description>We started to move the many parts of the furo project from theNorstroem to eclipse last month.
This forced us to restructure the individual parts of furo. The restructuring definitely brings us some advantages for the project itself.
For the consumers, the sharp separation of the involved components, a cleaner naming and improved documentation will give them a better view of the big picture.
We kept the changes that you have to made as low as possible.</description>
    </item>
    
  </channel>
</rss>
