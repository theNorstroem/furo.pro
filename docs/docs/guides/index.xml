<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on フロー Furo</title>
    <link>http://furo.pro/docs/guides/</link>
    <description>Recent content in Guides on フロー Furo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://furo.pro/docs/guides/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quickstart Guide</title>
      <link>http://furo.pro/docs/guides/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/guides/quickstart/</guid>
      <description>Quickstart Guide #  The easiest way to try out furo is by using furo init with the furo-BEC container. The container brings all the additional tools you need to generate the grpc stubs.
In this guide we will setup a furo spec project with the furo init command. The furo cli will then create the needed files to have a working project with a sample µType and µService definition.</description>
    </item>
    
    <item>
      <title>eBook Tutorial</title>
      <link>http://furo.pro/docs/guides/ebook-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/guides/ebook-tutorial/</guid>
      <description>Creating an enterprise-flavoured ToDo application from scratch with the Furo Web Stack #   eBook: https://github.com/theNorstroem/todo-management-tool/blob/main/eBook.pdf Repository: https://github.com/theNorstroem/todo-management-tool Furo Web Stack: https://furo.pro/  Foreword #  Hi! This guide is intended to simplify the introduction to the FURO Web Stack. The tutorial is based on a realistic story. You will explore:
 API Design with Eclipse Furo Furo Web Stack (https://furo.pro/) Go programming language (grpc backend) How to expose REST via gRPC Gateway Flow based programming Web Components (custom elements, shadow DOM, HTML templates, https://developer.</description>
    </item>
    
    <item>
      <title>Import protos</title>
      <link>http://furo.pro/docs/guides/import-proto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/guides/import-proto/</guid>
      <description>How to import proto files to µSpecs or Specs #  We offer 2 different ways to import specs from proto.
 protoc-gen-furo-specs which will generate specs protoc-gen-furo-muspecs which will generate muspecs  The steps for any of these two generators are the same. This document describes the import process for *.proto to µSpecs.
&amp;nbsp;➔&amp;nbsp; フロー µSpecs  mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph TD Protoc(Proto)-- protoc-gen-furo-spec -- Spec Protoc -- protoc-gen-furo-muspec -- µSpec µSpec(µSpec) Spec(Spec) µSpec-.</description>
    </item>
    
    <item>
      <title>GraphQL</title>
      <link>http://furo.pro/docs/guides/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/guides/graphql/</guid>
      <description>How to expose a GraphQL API from furo-specs #  Furo does not produce GraphQL directly.
Furo produces proto files. From the proto you have to generate a grpc-gateway and the OAS specs.
The final step is to use IBMs openapi-to-graphql or if you just want an instant server to test something the openapi-to-graphql-cli.
➔ ➔ Example Request #  collection entity </description>
    </item>
    
  </channel>
</rss>
