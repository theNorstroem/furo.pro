<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on フロー Furo</title>
    <link>http://furo.pro/docs/</link>
    <description>Recent content in Docs on フロー Furo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Nov 2020 19:37:46 +0100</lastBuildDate><atom:link href="http://furo.pro/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installation</title>
      <link>http://furo.pro/docs/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/installation/</guid>
      <description>Installation #  You can install furo on your local machine. For working with specs only, this is enough. We recommend furoBEC if you have to generate more then &amp;ldquo;just&amp;rdquo; the specs. furoBEC is a docker image which has nearly all dependencies already installed to generate all the additional things you may need to.
Installation with brew #  brew tap theNorstroem/tap brew install furo  Installation with go #  GO111MODULE=on go get github.</description>
    </item>
    
    <item>
      <title>Quickstart Guide</title>
      <link>http://furo.pro/docs/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/quickstart/</guid>
      <description>Quickstart Guide #  The easiest way to try out furo is by using furo init with the furo-BEC container. The container brings all the additional tools you need to generate the grpc stubs.
 If you already have an environment for proto and grpc development, you can install the furo cli localy and use it directly.
 In this guide we will setup a furo spec project with the furo init command.</description>
    </item>
    
    <item>
      <title>furo web</title>
      <link>http://furo.pro/docs/web-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/web-components/</guid>
      <description>フロー Furo Web Components #  Furo Web Components provides an enterprise ready set of web components which play seamlessly with Furo. Based on web standards and future proved. Compliant with any technology of choice. With minimal footprint it includes all enterprise standards, i18n, theming and much more.
The furo web components are a wide set of components which covers everything you need to write a web application. They consume the same types which are defined with furo.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://furo.pro/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/overview/</guid>
      <description>Overview #  Furo can produce and consume proto files. This enables you to use all the existing protoc generators to generate the output that fits your needs. Outputs can be documentations, boilerplate code and even applications.
 mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph TD µSpec(µSpec) Spec([Spec]) µSpec-- furo --Spec Spec-. furo .-µSpec Spec-- furoc-gen-XXX --x[...] Spec-- furo --Es6Module Spec-- furo --Proto Proto-- protoc-gen-grpc-gateway --Gateway Proto-- protoc-gen-openapiv2 --OpenApi OpenApi-- swagger --xo[.</description>
    </item>
    
    <item>
      <title>Project Configuration</title>
      <link>http://furo.pro/docs/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/configuration/</guid>
      <description>Configuration #  Each spec project must have a .furo configuration file.
A fictive example of a furo config for a spec project.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  furo:&amp;#34;1.</description>
    </item>
    
  </channel>
</rss>
