<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on フロー Furo</title>
    <link>http://furo.pro/docs/</link>
    <description>Recent content in Docs on フロー Furo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Nov 2020 19:37:46 +0100</lastBuildDate><atom:link href="http://furo.pro/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installation</title>
      <link>http://furo.pro/docs/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/installation/</guid>
      <description>Installation #  You can install furo on your local machine. For working with specs only, this is enough. We recommend furoBEC if you have to generate more then &amp;ldquo;just&amp;rdquo; the specs. furoBEC is a docker image which has nearly all dependencies already installed to generate all the additional things you may need to.
Installation with brew #  brew tap theNorstroem/tap brew install furo  Installation with go #  GO111MODULE=on go get github.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://furo.pro/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/overview/</guid>
      <description>Overview #  Furo can produce and consume proto files. This enables you to use all the existing protoc generators to generate the output that fits your needs. Outputs can be documentations, boilerplate code and even applications.
 mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph TD µSpec(µSpec) Spec([Spec]) µSpec-- furo --Spec Spec-. furo .-µSpec Spec-- furoc-gen-XXX --x[...] Spec-- furo --Es6Module Spec-- furo --Proto Proto-- protoc-gen-grpc-gateway --Gateway Proto-- protoc-gen-openapiv2 --OpenApi OpenApi-- swagger --xo[.</description>
    </item>
    
    <item>
      <title>Project Configuration</title>
      <link>http://furo.pro/docs/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/configuration/</guid>
      <description>Configuration #  Each spec project must have a configuration file. The furo cli tool will look up for .furo in the current working directory or can be called with the --config option.
You can generate a config file with a inital project structure by calling furo init.
As you can see, the config file is a regular yaml file and is easy to edit in any text editor or IDE.</description>
    </item>
    
    <item>
      <title>Working with Flows</title>
      <link>http://furo.pro/docs/flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/flow/</guid>
      <description>Working with Flows #  Instead of calling each command of furo again and again, you can set up a flow which chains them together.
The config file from the init haves a preconfigured default flow.
chain of furo commands  mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph LR deprecated -- muSpec2Spec -- checkImports -- genMessageProtos -- genServiceProtos How to define a flow #  The single commands of furo can be configured as a chain of commands.</description>
    </item>
    
    <item>
      <title>Working with Dependencies</title>
      <link>http://furo.pro/docs/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/dependencies/</guid>
      <description>Working with Dependencies #  You can install another spec in to your project, to use their types.
Note: A installable dependency must be reachable by your git command.  Install a spec project #  To install a dependency add them to the dependencies section of the config. It is a list with git repositories followed by a version tag or branch name.
By running furo install the dependency will be added to the configured directory in your project.</description>
    </item>
    
    <item>
      <title>Well known Base Types</title>
      <link>http://furo.pro/docs/basetypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/basetypes/</guid>
      <description>Known types free of charge #  The github.com:theNorstroem/furoBaseSpecs contain ready-made type specifications such as BigDecimal, Reference and much more.
Type Listing #   Furo types  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/furo   Furo Annotated Types (FAT)  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/furo/fat   Google api  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/google/api   Google rpc  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/google/rpc   Google protobuf  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/google/protobuf   Google type  https://github.com/theNorstroem/furoBaseSpecs/tree/master/specs/google/type    Usage #  In the chapter Working with Dependencies you will see how to install the base types.</description>
    </item>
    
  </channel>
</rss>
