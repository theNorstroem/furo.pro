<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on フロー Furo</title>
    <link>http://furo.pro/docs/</link>
    <description>Recent content in Docs on フロー Furo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Nov 2020 19:37:46 +0100</lastBuildDate><atom:link href="http://furo.pro/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installation</title>
      <link>http://furo.pro/docs/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/installation/</guid>
      <description>Installation #  You can install furo on your local machine. For working with specs only, this is enough. We recommend furoBEC if you have to generate more then &amp;ldquo;just&amp;rdquo; the specs. furoBEC is a docker image which has nearly all dependencies already installed to generate all the additional things you may need to.
Installation with brew #  brew tap theNorstroem/tap brew install furo  Installation with go #  GO111MODULE=on go get github.</description>
    </item>
    
    <item>
      <title>furo web</title>
      <link>http://furo.pro/docs/web-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/web-components/</guid>
      <description>フロー Furo Web Components #  Data Integration / Adapters  FBP   Material or UI5  Layouter   </description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://furo.pro/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/overview/</guid>
      <description>Overview #  Furo can produce and consume proto files. This enables you to use all the existing protoc generators to generate the output that fits your needs. Outputs can be documentations, boilerplate code and even applications.
 mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph TD µSpec(µSpec) Spec([Spec]) µSpec-- furo --Spec Spec-. furo .-µSpec Spec-- furoc-gen-XXX --x[...] Spec-- furo --Es6Module Spec-- furo --Proto Proto-- protoc-gen-grpc-gateway --Gateway Proto-- protoc-gen-openapiv2 --OpenApi OpenApi-- swagger --xo[.</description>
    </item>
    
    <item>
      <title>Project Configuration</title>
      <link>http://furo.pro/docs/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://furo.pro/docs/configuration/</guid>
      <description>Configuration #  Each spec project must have a .furo configuration file.
A fictive example of a furo config for a spec project.
furo:&amp;#34;1.20.0&amp;#34;#Minimal furo versionspecDir:&amp;#34;./specs&amp;#34;specFormat:&amp;#34;yaml&amp;#34;#set to yaml or jsondependencies:#do not write every type/message again and again. Install them.- &amp;#34;git@github.com:theNorstroem/furoBaseSpecs.git v1.11.8&amp;#34;# The importer looks for all **/*.type.spec files recursive The importer looks for all **/*.service.spec files recursivedependenciesDir:dependencies #directory where the dependencies get installed to.muSpec:types:- &amp;#34;./muspecs/**/*types.yaml&amp;#34;- &amp;#34;./muspecs/*types.yaml&amp;#34;#Use this if you do not put your specs in foldersservices:- &amp;#34;.</description>
    </item>
    
  </channel>
</rss>
